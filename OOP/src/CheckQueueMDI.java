import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 *
 * @author nk
 */
public class CheckQueueMDI extends javax.swing.JFrame implements OnClick{
    private javax.swing.JLabel Cancel;
    private javax.swing.JLabel Confirm;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel Queue;
    private javax.swing.JLabel bg;
    private javax.swing.JButton bt_cancel;
    private javax.swing.JButton bt_confirm;
    private javax.swing.JLabel img_checking;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel_id;
    private javax.swing.JLabel jLabel_lab;
    private javax.swing.JLabel jLabel_name;
    private javax.swing.JLabel lab;
    private javax.swing.JLabel seat;
    private javax.swing.JLabel std_id;
    private Computer comp;
    private ComputerPanel companel;
    /**
     * Creates new form Reservation
     */
    public CheckQueueMDI(ComputerPanel companel, Computer comp) {
        this.companel = companel;
        this.comp = comp;
        initComponents();
        setCustomFont();
        centerFrame();
    }

    private void setCustomFont() {
        try {
            // Load and register the font
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("OOP/src/Font/Big Apple 3PM.ttf"));
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(customFont);

            // Set the font for components
            Queue.setFont(customFont.deriveFont(Font.BOLD, 24));
            seat.setFont(customFont.deriveFont(Font.BOLD, 18));
            Name.setFont(customFont.deriveFont(Font.BOLD, 18));
            std_id.setFont(customFont.deriveFont(Font.BOLD, 18));
            lab.setFont(customFont.deriveFont(Font.BOLD, 18));
            Confirm.setFont(customFont.deriveFont(Font.BOLD, 18));
            Cancel.setFont(customFont.deriveFont(Font.BOLD, 18));
            jLabel_name.setFont(customFont.deriveFont(Font.PLAIN, 13));
            jLabel_id.setFont(customFont.deriveFont(Font.PLAIN, 13));
            jLabel_lab.setFont(customFont.deriveFont(Font.PLAIN, 13));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    private void centerFrame() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int screenWidth = screenSize.width;
        int screenHeight = screenSize.height;
        int frameWidth = this.getSize().width;
        int frameHeight = this.getSize().height;
        int x = (screenWidth - frameWidth) / 2;
        int y = (screenHeight - frameHeight) / 2;
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private void initComponents() {

        Queue = new javax.swing.JLabel();
        img_checking = new javax.swing.JLabel();
        seat = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Name = new javax.swing.JLabel();
        std_id = new javax.swing.JLabel();
        lab = new javax.swing.JLabel();
        Confirm = new javax.swing.JLabel();
        bt_confirm = new javax.swing.JButton();
        Cancel = new javax.swing.JLabel();
        bt_cancel = new javax.swing.JButton();
        jLabel_name = new javax.swing.JLabel();
        jLabel_id = new javax.swing.JLabel();
        jLabel_lab = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        setLocationRelativeTo(null);

        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Queue.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        Queue.setForeground(new java.awt.Color(239, 210, 173));
        Queue.setText("Queue 1");
        getContentPane().add(Queue, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, -1));

        img_checking.setIcon(new javax.swing.ImageIcon("OOP/src/Image/checking-2.png")); // NOI18N
        getContentPane().add(img_checking, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        seat.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        seat.setForeground(new java.awt.Color(215, 210, 173));
        seat.setText("Seat - " + comp.getComp_id());
        getContentPane().add(seat, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 150, -1, -1));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, -1));

        Name.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Name.setForeground(new java.awt.Color(239, 210, 173));
        Name.setText("Name");
        getContentPane().add(Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 203, 60, 30));

        std_id.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        std_id.setForeground(new java.awt.Color(239, 210, 173));
        std_id.setText("STD_id");
        getContentPane().add(std_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, 70, 50));

        lab.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lab.setForeground(new java.awt.Color(239, 210, 173));
        lab.setText("Lab");
        getContentPane().add(lab, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 320, 40, 20));


        bt_confirm.setIcon(new javax.swing.ImageIcon("OOP/src/Image/confirmButtonFont.png")); // NOI18N
        bt_confirm.setBorderPainted(false);
        bt_confirm.setContentAreaFilled(false);
        bt_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressConfirm(evt);
            }
        });
        bt_confirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bt_confirmMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bt_confirmMouseExited(evt);
            }
        });
        getContentPane().add(bt_confirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 390, -1, -1));


        bt_cancel.setIcon(new javax.swing.ImageIcon("OOP/src/Image/cancelButtonFont.png")); // NOI18N
        bt_cancel.setBorderPainted(false);
        bt_cancel.setContentAreaFilled(false);
        bt_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressCancel(evt);
            }
        });
        bt_cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bt_cancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bt_cancelMouseExited(evt);
            }
        });
        getContentPane().add(bt_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 390, -1, -1));

        jLabel_name.setForeground(new java.awt.Color(239, 210, 173));
        jLabel_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_name.setText(comp.getName());
        jLabel_name.setToolTipText("");
        getContentPane().add(jLabel_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 140, -1));

        jLabel_id.setForeground(new java.awt.Color(239, 210, 173));
        jLabel_id.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_id.setText(comp.getStd_id());
        getContentPane().add(jLabel_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 120, 30));

        jLabel_lab.setForeground(new java.awt.Color(239, 210, 173));
        jLabel_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_lab.setText(comp.getLab_name());
        getContentPane().add(jLabel_lab, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, 50, 20));

        bg.setIcon(new javax.swing.ImageIcon("OOP/src/Image/reserve.png")); // NOI18N
        bg.setBackground(new java.awt.Color(84, 59, 45));
        bg.setOpaque(true);
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }
    private void bt_confirmActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void bt_cancelActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void bt_cancelMouseEntered(java.awt.event.MouseEvent evt) {
        //        Change cursor to hand cursor and change pic to bigger button
        bt_cancel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        bt_cancel.setIcon(new ImageIcon("OOP/src/Image/Button/cancelButtonBig.png"));
    }

    private void bt_cancelMouseExited(java.awt.event.MouseEvent evt) {
        //        Change pic to smaller button
        bt_cancel.setIcon(new ImageIcon("OOP/src/Image/Button/cancelButtonSmall.png"));
    }

    private void bt_confirmMouseEntered(java.awt.event.MouseEvent evt) {
        //        Change cursor to hand cursor and change pic to bigger button
        bt_confirm.setCursor(new Cursor(Cursor.HAND_CURSOR));
        bt_confirm.setIcon(new ImageIcon("OOP/src/Image/Button/confirmButtonBig.png"));
    }

    private void bt_confirmMouseExited(java.awt.event.MouseEvent evt) {
        //        Change pic to smaller button
        bt_confirm.setIcon(new ImageIcon("OOP/src/Image/Button/confirmButtonSmall.png"));
    }


    @Override
    public void pressConfirm(ActionEvent event) {
        if (this.comp.getStatus() == 1) {
            String checkingSql = "UPDATE Reservation SET Status = 2 WHERE SM_SeatID = ?";
            int deskNumber = this.comp.getComp_id();
            try (PreparedStatement checkingstatement = DbCon.prepareStatement(checkingSql)) {
                System.out.println("Checking this queue");
                checkingstatement.setInt(1, deskNumber);
                checkingstatement.executeUpdate();
                this.companel.updateButtonIcon();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            dispose();
            Checkingpage checkingWindow = new Checkingpage(companel, comp);
            checkingWindow.setVisible(true);
        } else {
            JFrame errorFrame = new JFrame();
            JOptionPane.showMessageDialog(errorFrame, "There's other TA currently checking this queue.");
        }

    }

    @Override
    public void pressCancel(ActionEvent event) {
        int userChoice = JOptionPane.showConfirmDialog(null, "You can't skip queues. If you press OK you will delete this queue. Are you sure you want to do it?", "Warning", JOptionPane.OK_CANCEL_OPTION);
        switch(userChoice) {
            case JOptionPane.OK_OPTION:
                String update_qSql = "DELETE FROM Reservation WHERE SM_SeatID = ?";
                String update_rSql = "UPDATE SeatManager SET Reservable = 1 WHERE SeatID = ?";
                try (PreparedStatement update_qstatement = DbCon.prepareStatement(update_qSql);
                     PreparedStatement update_rstatement = DbCon.prepareStatement(update_rSql)) {
                    int deskNumber = comp.getComp_id();
                    this.comp.setName("");
                    this.comp.setLab_name("");
                    this.comp.setStd_id("");
                    this.comp.setStatus(0);
                    this.companel.updateButtonIcon();
                    update_qstatement.setInt(1, deskNumber);
                    update_rstatement.setInt(1, deskNumber);
                    update_qstatement.executeUpdate();
                    update_rstatement.executeUpdate();
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
                System.out.println("User deleted queue");
                dispose();
                JOptionPane.showMessageDialog(null, "Queue deleted");
            case JOptionPane.CANCEL_OPTION:
                System.out.println("User canceled queue deletion");

        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {

    }
}
